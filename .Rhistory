library(knitr)
library(dsims)
myecho <- TRUE
myeval <- TRUE
opts_chunk$set(
tidy=TRUE     # display NOT code as typed
)
needed.packages <- c("dsims")
myrepo <- "http://cran.rstudio.com"
install.packages(needed.packages, repos=myrepo)
region <- make.region(region.name = "Survey Region",
units = "m",
shape = "Region.shp")
plot(region)
density <- make.density(region = region, x.space = 1000, y.space = 1000, constant = 0.4e-7)
density <- add.hotspot(density, centre = c(-2500, 2224000), sigma = 10000, amplitude = 0.1e-7)
density <- add.hotspot(density, centre = c(0, 2184000), sigma = 18000, amplitude = -0.5e-8)
# Plot this example density surface
plot(density, region)
load("density.robj")
# Save the ggplot object rather than displaying automatically
density.plot <- plot(density, region)
paths <- sf::st_read("Survey_Transects/Paths.shp")
density.plot +
geom_sf(data = paths, mapping = aes(), colour = "blue")
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "blue")
library(sf)
library(ggplot2)
paths <- sf::st_read("Survey_Transects/Paths.shp")
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "blue")
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "light blue")
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "light blue", lwd = 2)
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "light blue", lwd = 1.5)
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "light blue", lwd = 1)
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "red", lwd = 1)
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "light blue", lwd = 1)
load("density.robj")
# Save the ggplot object rather than displaying automatically
density.plot <- plot(density, region)
# Load and add the paths to the density plot
library(sf)
library(ggplot2)
paths <- sf::st_read("Survey_Transects/Paths.shp")
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "light blue", lwd = 1)
load("density.robj")
# Save the ggplot object rather than displaying automatically
density.plot <- plot(density, region)
# Load and add the paths to the density plot
library(sf)
library(ggplot2)
paths <- sf::st_read("Survey_Transects/Paths.shp")
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "light blue", lwd = 1)
?sf::st_read
load("density.robj")
# Save the ggplot object rather than displaying automatically
density.plot <- plot(density, region)
# Load and add the paths to the density plot
library(sf)
library(ggplot2)
paths <- sf::st_read("Survey_Transects/Paths.shp", quiet = TRUE)
density.plot +
ggplot2::geom_sf(data = paths, mapping = aes(), colour = "light blue", lwd = 1)
extract.metrics <- function(simobj) {
nreps <- simobj@reps
data <- simobj@results$individuals$summary
effort.avg <- data[,,nreps+1][3]/1000
detects.avg <- data[,,nreps+1][4]
abund <- simobj@results$individuals$N
abund.avg <- abund[,,nreps+1][1]
true.N <- simobj@population.description@N
est.bias <- (abund.avg - true.N) / true.N
est.bias.pct <- est.bias * 100
mean.stderr <- abund[,,nreps+1][2]
stddev <- abund[,,nreps+2][1]
result.vector <- unname(c(effort.avg, detects.avg, abund.avg, est.bias.pct, mean.stderr, stddev))
return(result.vector)
}
subjective <- extract.metrics(simulation.subjective)
load("Results/simulation_subjective.robj")
load("Results/simulation_parallel.robj")
load("Results/simulation_zigzag.robj")
extract.metrics <- function(simobj) {
nreps <- simobj@reps
data <- simobj@results$individuals$summary
effort.avg <- data[,,nreps+1][3]/1000
detects.avg <- data[,,nreps+1][4]
abund <- simobj@results$individuals$N
abund.avg <- abund[,,nreps+1][1]
true.N <- simobj@population.description@N
est.bias <- (abund.avg - true.N) / true.N
est.bias.pct <- est.bias * 100
mean.stderr <- abund[,,nreps+1][2]
stddev <- abund[,,nreps+2][1]
result.vector <- unname(c(effort.avg, detects.avg, abund.avg, est.bias.pct, mean.stderr, stddev))
return(result.vector)
}
subjective <- extract.metrics(simulation.subjective)
parallel <- extract.metrics(simulation.parallel)
zigzag <- extract.metrics(simulation.zigzag)
result.table <- data.frame(subjective, parallel, zigzag,
row.names=c("Mean effort(km)", "Mean sample size", "Mean abundance estimate", "Estimated percent bias", "Mean SE of abundance estimate", "SD of abundance estimates"))
kable(result.table, digits = 1, caption="Simulation results summary for each design.  Estimates based upon 999 simulations with true abundance of 1500 objects.")
